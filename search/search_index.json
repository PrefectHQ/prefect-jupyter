{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"prefect-jupyter Welcome! Prefect integrations interacting with Jupyter. Getting Started Python setup Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation . Installation Install prefect-jupyter with pip : pip install prefect-jupyter Run a parameterized notebook from prefect import flow from prefect_jupyter import notebook @flow def example_execute_notebook (): body = notebook . execute_notebook ( \"test_notebook.ipynb\" , parameters = { \"num\" : 5 } ) output_path = \"executed_notebook.ipynb\" with open ( output_path , \"w\" ) as f : f . write ( body ) return output_path example_execute_notebook () Resources If you encounter any bugs while using prefect-jupyter , feel free to open an issue in the prefect-jupyter repository. If you have any questions or issues while using prefect-jupyter , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Development If you'd like to install a version of prefect-jupyter for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-jupyter.git cd prefect-jupyter/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Home"},{"location":"#prefect-jupyter","text":"","title":"prefect-jupyter"},{"location":"#welcome","text":"Prefect integrations interacting with Jupyter.","title":"Welcome!"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#python-setup","text":"Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation .","title":"Python setup"},{"location":"#installation","text":"Install prefect-jupyter with pip : pip install prefect-jupyter","title":"Installation"},{"location":"#run-a-parameterized-notebook","text":"from prefect import flow from prefect_jupyter import notebook @flow def example_execute_notebook (): body = notebook . execute_notebook ( \"test_notebook.ipynb\" , parameters = { \"num\" : 5 } ) output_path = \"executed_notebook.ipynb\" with open ( output_path , \"w\" ) as f : f . write ( body ) return output_path example_execute_notebook ()","title":"Run a parameterized notebook"},{"location":"#resources","text":"If you encounter any bugs while using prefect-jupyter , feel free to open an issue in the prefect-jupyter repository. If you have any questions or issues while using prefect-jupyter , you can find help in either the Prefect Discourse forum or the Prefect Slack community .","title":"Resources"},{"location":"#development","text":"If you'd like to install a version of prefect-jupyter for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-jupyter.git cd prefect-jupyter/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Development"},{"location":"notebook/","text":"prefect_jupyter.notebook Module containing tasks for interacting with Jupyter. OutputFormat Valid output formats of a notebook. Source code in prefect_jupyter/notebook.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class OutputFormat ( Enum ): \"\"\" Valid output formats of a notebook. \"\"\" ASCIIDOC = \"asciidoc\" CUSTOM = \"custom\" HTML = \"html\" LATEX = \"latext\" MARKDOWN = \"markdown\" NOTEBOOK = \"notebook\" JSON = \"notebook\" PDF = \"pdf\" PYTHON = \"python\" RST = \"rst\" SCRIPT = \"script\" WEBPDF = \"webpdf\" execute_notebook Task for running Jupyter Notebooks. In order to parametrize the notebook, you need to mark the parameters cell as described in the papermill documentation . Parameters: Name Type Description Default path str Where to fetch the notebook from; can be a cloud storage path. required parameters Optional [ Dict [ str , Any ]] Parameters to use for the notebook. None log_output bool Whether or not to log notebook cell output to the papermill logger. False output_format OutputFormat The notebook output format. OutputFormat.NOTEBOOK kernel_name Optional [ str ] Name of kernel to execute the notebook against. None **export_kwargs Dict [ str , Any ] Additional keyword arguments to pass to nbconvert.export . {} Returns: Type Description str The body of the output. Examples: Run a parameterized notebook. from prefect import flow from prefect_jupyter import notebook @flow def example_execute_notebook (): body = notebook . execute_notebook ( \"test_notebook.ipynb\" , parameters = { \"num\" : 5 } ) output_path = \"executed_notebook.ipynb\" with open ( output_path , \"w\" ) as f : f . write ( body ) return output_path example_execute_notebook () Source code in prefect_jupyter/notebook.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 @task def execute_notebook ( path : str , parameters : Optional [ Dict [ str , Any ]] = None , log_output : bool = False , output_format : OutputFormat = OutputFormat . NOTEBOOK , kernel_name : Optional [ str ] = None , ** export_kwargs : Dict [ str , Any ], ) -> str : \"\"\" Task for running Jupyter Notebooks. In order to parametrize the notebook, you need to mark the parameters cell as described in the [papermill documentation]( https://papermill.readthedocs.io/en/latest/usage-parameterize.html). Args: path: Where to fetch the notebook from; can be a cloud storage path. parameters: Parameters to use for the notebook. log_output: Whether or not to log notebook cell output to the papermill logger. output_format: The notebook output format. kernel_name: Name of kernel to execute the notebook against. **export_kwargs: Additional keyword arguments to pass to `nbconvert.export`. Returns: The body of the output. Examples: Run a parameterized notebook. ```python from prefect import flow from prefect_jupyter import notebook @flow def example_execute_notebook(): body = notebook.execute_notebook( \"test_notebook.ipynb\", parameters={\"num\": 5} ) output_path = \"executed_notebook.ipynb\" with open(output_path, \"w\") as f: f.write(body) return output_path example_execute_notebook() ``` \"\"\" nb : nbformat . NotebookNode = pm . execute_notebook ( path , \"-\" , parameters = parameters , kernel_name = kernel_name , log_output = log_output , ) exporter = nbconvert . get_exporter ( output_format . value ) body , _ = nbconvert . export ( exporter , nb , ** export_kwargs ) return body","title":"Notebook"},{"location":"notebook/#prefect_jupyter.notebook","text":"Module containing tasks for interacting with Jupyter.","title":"notebook"},{"location":"notebook/#prefect_jupyter.notebook.OutputFormat","text":"Valid output formats of a notebook. Source code in prefect_jupyter/notebook.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class OutputFormat ( Enum ): \"\"\" Valid output formats of a notebook. \"\"\" ASCIIDOC = \"asciidoc\" CUSTOM = \"custom\" HTML = \"html\" LATEX = \"latext\" MARKDOWN = \"markdown\" NOTEBOOK = \"notebook\" JSON = \"notebook\" PDF = \"pdf\" PYTHON = \"python\" RST = \"rst\" SCRIPT = \"script\" WEBPDF = \"webpdf\"","title":"OutputFormat"},{"location":"notebook/#prefect_jupyter.notebook.execute_notebook","text":"Task for running Jupyter Notebooks. In order to parametrize the notebook, you need to mark the parameters cell as described in the papermill documentation . Parameters: Name Type Description Default path str Where to fetch the notebook from; can be a cloud storage path. required parameters Optional [ Dict [ str , Any ]] Parameters to use for the notebook. None log_output bool Whether or not to log notebook cell output to the papermill logger. False output_format OutputFormat The notebook output format. OutputFormat.NOTEBOOK kernel_name Optional [ str ] Name of kernel to execute the notebook against. None **export_kwargs Dict [ str , Any ] Additional keyword arguments to pass to nbconvert.export . {} Returns: Type Description str The body of the output. Examples: Run a parameterized notebook. from prefect import flow from prefect_jupyter import notebook @flow def example_execute_notebook (): body = notebook . execute_notebook ( \"test_notebook.ipynb\" , parameters = { \"num\" : 5 } ) output_path = \"executed_notebook.ipynb\" with open ( output_path , \"w\" ) as f : f . write ( body ) return output_path example_execute_notebook () Source code in prefect_jupyter/notebook.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 @task def execute_notebook ( path : str , parameters : Optional [ Dict [ str , Any ]] = None , log_output : bool = False , output_format : OutputFormat = OutputFormat . NOTEBOOK , kernel_name : Optional [ str ] = None , ** export_kwargs : Dict [ str , Any ], ) -> str : \"\"\" Task for running Jupyter Notebooks. In order to parametrize the notebook, you need to mark the parameters cell as described in the [papermill documentation]( https://papermill.readthedocs.io/en/latest/usage-parameterize.html). Args: path: Where to fetch the notebook from; can be a cloud storage path. parameters: Parameters to use for the notebook. log_output: Whether or not to log notebook cell output to the papermill logger. output_format: The notebook output format. kernel_name: Name of kernel to execute the notebook against. **export_kwargs: Additional keyword arguments to pass to `nbconvert.export`. Returns: The body of the output. Examples: Run a parameterized notebook. ```python from prefect import flow from prefect_jupyter import notebook @flow def example_execute_notebook(): body = notebook.execute_notebook( \"test_notebook.ipynb\", parameters={\"num\": 5} ) output_path = \"executed_notebook.ipynb\" with open(output_path, \"w\") as f: f.write(body) return output_path example_execute_notebook() ``` \"\"\" nb : nbformat . NotebookNode = pm . execute_notebook ( path , \"-\" , parameters = parameters , kernel_name = kernel_name , log_output = log_output , ) exporter = nbconvert . get_exporter ( output_format . value ) body , _ = nbconvert . export ( exporter , nb , ** export_kwargs ) return body","title":"execute_notebook()"}]}