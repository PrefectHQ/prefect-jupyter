{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"prefect-jupyter","text":""},{"location":"#welcome","title":"Welcome!","text":"<p>Prefect integrations interacting with Jupyter.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#python-setup","title":"Python setup","text":"<p>Requires an installation of Python 3.7+.</p> <p>We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv.</p> <p>These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install <code>prefect-jupyter</code> with <code>pip</code>:</p> <pre><code>pip install prefect-jupyter\n</code></pre>"},{"location":"#run-a-parameterized-notebook","title":"Run a parameterized notebook","text":"<p><code>prefect-jupyter</code> uses papermill under the hood. Check out papermill's documentation to learn how to parametrize the notebook.</p> <p>The following code shows how to run a parameterized notebook:</p> <pre><code>from prefect import flow\nfrom prefect_jupyter import notebook\n\n@flow\ndef example_execute_notebook():\n    nb = notebook.execute_notebook(\n        \"test_notebook.ipynb\",\n        parameters={\"num\": 5}\n    )\n    body = notebook.export_notebook(nb)\n    output_path = \"executed_notebook.ipynb\"\n    with open(output_path, \"w\") as f:\n        f.write(body)\n    return output_path\n\nexample_execute_notebook()\n</code></pre>"},{"location":"#resources","title":"Resources","text":""},{"location":"#feedback","title":"Feedback","text":"<p>If you encounter any bugs while using <code>prefect-jupyter</code>, feel free to open an issue in the prefect-jupyter repository.</p> <p>If you have any questions or issues while using <code>prefect-jupyter</code>, you can find help in either the Prefect Discourse forum or the Prefect Slack community.</p> <p>Feel free to star or watch <code>prefect-jupyter</code> for updates too!</p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you'd like to help contribute to fix an issue or add a feature to <code>prefect-jupyter</code>, please propose changes through a pull request from a fork of the repository.</p> <p>Here are the steps:</p> <ol> <li>Fork the repository</li> <li>Clone the forked repository</li> <li>Install the repository and its dependencies: <pre><code> pip install -e \".[dev]\"\n</code></pre></li> <li>Make desired changes</li> <li>Add tests</li> <li>Insert an entry to CHANGELOG.md</li> <li>Install <code>pre-commit</code> to perform quality checks prior to commit: <code>bash  pre-commit install</code></li> <li><code>git commit</code>, <code>git push</code>, and create a pull request</li> </ol>"},{"location":"examples_catalog/","title":"Examples Catalog","text":"<p>Below is a list of examples for <code>prefect-jupyter</code>.</p>"},{"location":"examples_catalog/#notebook-module","title":"Notebook Module","text":"<p>Export a notebook to HTML <pre><code>import nbformat\nfrom prefect import flow\n\nfrom prefect_jupyter import notebook\n\n@flow\ndef example_export_notebook():\n    with open(\"example_notebook.ipynb\", \"r\") as f:\n        nb = nbformat.read(f, as_version=4)\n\n    html_body = notebook.export_notebook(\n        nb, output_format=notebook.OutputFormat.HTML\n    )\n\n    with open(\"exported_notebook.html\", \"w\") as f:\n        f.write(html_body)\n\nexample_export_notebook()\n</code></pre> Run a parameterized notebook. <pre><code>from prefect import flow\nfrom prefect_jupyter import notebook\n\n@flow\ndef example_execute_notebook():\n    nb = notebook.execute_notebook(\n        \"test_notebook.ipynb\",\n        parameters={\"num\": 5}\n    )\n    body = notebook.export_notebook(nb)\n    output_path = \"executed_notebook.ipynb\"\n    with open(output_path, \"w\") as f:\n        f.write(body)\n    return output_path\n\nexample_execute_notebook()\n</code></pre></p>"},{"location":"notebook/","title":"Notebook","text":""},{"location":"notebook/#prefect_jupyter.notebook","title":"<code>prefect_jupyter.notebook</code>","text":"<p>Module containing tasks for interacting with Jupyter.</p>"},{"location":"notebook/#prefect_jupyter.notebook-classes","title":"Classes","text":""},{"location":"notebook/#prefect_jupyter.notebook.OutputFormat","title":"<code>OutputFormat</code>","text":"<p>             Bases: <code>Enum</code></p> <p>Valid output formats of a notebook.</p> Source code in <code>prefect_jupyter/notebook.py</code> <pre><code>class OutputFormat(Enum):\n    \"\"\"\n    Valid output formats of a notebook.\n    \"\"\"\n\n    ASCIIDOC = \"asciidoc\"\n    CUSTOM = \"custom\"\n    HTML = \"html\"\n    LATEX = \"latext\"\n    MARKDOWN = \"markdown\"\n    NOTEBOOK = \"notebook\"\n    JSON = \"notebook\"\n    PDF = \"pdf\"\n    PYTHON = \"python\"\n    RST = \"rst\"\n    SCRIPT = \"script\"\n    WEBPDF = \"webpdf\"\n</code></pre>"},{"location":"notebook/#prefect_jupyter.notebook-functions","title":"Functions","text":""},{"location":"notebook/#prefect_jupyter.notebook.execute_notebook","title":"<code>execute_notebook</code>","text":"<p>Task for running Jupyter Notebooks.</p> <p>In order to parametrize the notebook, you need to mark the parameters cell as described in the papermill documentation.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Where to fetch the notebook from; can be a cloud storage path.</p> required <code>parameters</code> <code>Optional[Dict[str, Any]]</code> <p>Parameters to use for the notebook.</p> <code>None</code> <code>log_output</code> <code>bool</code> <p>Whether or not to log notebook cell output to the papermill logger.</p> <code>False</code> <code>kernel_name</code> <code>Optional[str]</code> <p>Name of kernel to execute the notebook against.</p> <code>None</code> <code>**execute_kwargs</code> <code>Dict[str, Any]</code> <p>Additional keyword arguments to pass to <code>execute_notebook</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>The NotebookNode object of the executed notebook.</p> <p>Examples:</p> <p>Run a parameterized notebook. <pre><code>from prefect import flow\nfrom prefect_jupyter import notebook\n\n@flow\ndef example_execute_notebook():\n    nb = notebook.execute_notebook(\n        \"test_notebook.ipynb\",\n        parameters={\"num\": 5}\n    )\n    body = notebook.export_notebook(nb)\n    output_path = \"executed_notebook.ipynb\"\n    with open(output_path, \"w\") as f:\n        f.write(body)\n    return output_path\n\nexample_execute_notebook()\n</code></pre></p> Source code in <code>prefect_jupyter/notebook.py</code> <pre><code>@task\ndef execute_notebook(\n    path: str,\n    parameters: Optional[Dict[str, Any]] = None,\n    log_output: bool = False,\n    kernel_name: Optional[str] = None,\n    **execute_kwargs: Dict[str, Any],\n) -&gt; str:\n    \"\"\"\n    Task for running Jupyter Notebooks.\n\n    In order to parametrize the notebook, you need to mark the parameters\n    cell as described in the [papermill documentation](\n    https://papermill.readthedocs.io/en/latest/usage-parameterize.html).\n\n    Args:\n        path: Where to fetch the notebook from; can be a cloud storage path.\n        parameters: Parameters to use for the notebook.\n        log_output: Whether or not to log notebook cell output to the papermill logger.\n        kernel_name: Name of kernel to execute the notebook against.\n        **execute_kwargs: Additional keyword arguments to pass to `execute_notebook`.\n\n    Returns:\n        The NotebookNode object of the executed notebook.\n\n    Examples:\n        Run a parameterized notebook.\n        ```python\n        from prefect import flow\n        from prefect_jupyter import notebook\n\n        @flow\n        def example_execute_notebook():\n            nb = notebook.execute_notebook(\n                \"test_notebook.ipynb\",\n                parameters={\"num\": 5}\n            )\n            body = notebook.export_notebook(nb)\n            output_path = \"executed_notebook.ipynb\"\n            with open(output_path, \"w\") as f:\n                f.write(body)\n            return output_path\n\n        example_execute_notebook()\n        ```\n    \"\"\"\n    return pm.execute_notebook(\n        path,\n        None,\n        parameters=parameters,\n        kernel_name=kernel_name,\n        log_output=log_output,\n        **execute_kwargs,\n    )\n</code></pre>"},{"location":"notebook/#prefect_jupyter.notebook.export_notebook","title":"<code>export_notebook</code>","text":"<p>Task for exporting a NotebookNode.</p> <p>Parameters:</p> Name Type Description Default <code>nb</code> <code>NotebookNode</code> <p>The notebook to export.</p> required <code>output_format</code> <code>OutputFormat</code> <p>The notebook output format.</p> <code>NOTEBOOK</code> <code>**export_kwargs</code> <code>Dict[str, Any]</code> <p>Additional keyword arguments to pass to <code>nbconvert.export</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>The body of the output.</p> <p>Examples:</p> <p>Export a notebook to HTML <pre><code>import nbformat\nfrom prefect import flow\n\nfrom prefect_jupyter import notebook\n\n@flow\ndef example_export_notebook():\n    with open(\"example_notebook.ipynb\", \"r\") as f:\n        nb = nbformat.read(f, as_version=4)\n\n    html_body = notebook.export_notebook(\n        nb, output_format=notebook.OutputFormat.HTML\n    )\n\n    with open(\"exported_notebook.html\", \"w\") as f:\n        f.write(html_body)\n\nexample_export_notebook()\n</code></pre></p> Source code in <code>prefect_jupyter/notebook.py</code> <pre><code>@task\ndef export_notebook(\n    nb: nbformat.NotebookNode,\n    output_format: OutputFormat = OutputFormat.NOTEBOOK,\n    **export_kwargs: Dict[str, Any],\n) -&gt; str:\n    \"\"\"\n    Task for exporting a NotebookNode.\n\n    Args:\n        nb: The notebook to export.\n        output_format: The notebook output format.\n        **export_kwargs: Additional keyword arguments to pass to `nbconvert.export`.\n\n    Returns:\n        The body of the output.\n\n    Examples:\n        Export a notebook to HTML\n        ```python\n        import nbformat\n        from prefect import flow\n\n        from prefect_jupyter import notebook\n\n        @flow\n        def example_export_notebook():\n            with open(\"example_notebook.ipynb\", \"r\") as f:\n                nb = nbformat.read(f, as_version=4)\n\n            html_body = notebook.export_notebook(\n                nb, output_format=notebook.OutputFormat.HTML\n            )\n\n            with open(\"exported_notebook.html\", \"w\") as f:\n                f.write(html_body)\n\n        example_export_notebook()\n        ```\n    \"\"\"\n    exporter = nbconvert.get_exporter(output_format.value)\n    body, _ = nbconvert.export(exporter, nb, **export_kwargs)\n    return body\n</code></pre>"}]}